This Document details how to debug.
Assumes that you have gone through:
- setup-framework.txt Everyting needed to import project and install dependant softwares
- setup-eclipseToDebug.txt needed to debug quickly(makes your life easier)
- workflow.txt to know the overall design works
- testTemplate.java.txt: to know how an individual Test-Class looks like and how the control flows within a single class file
- dependsOnMethodAndRetryLogic.txt - that describes how dependsOnMethod and retry logic works in more details and when to use them


========================================
How to debug a single method:
========================================
Suppose you have project.zcs.tests.MyClass1 and have Method1 that you need to debug
1. Open SelNG/conf/testng-debug.xml

<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >
<suite name='SelNG'>

  <test verbose="10" name="debug" >
    	<groups>
      <run>
      	 <include name="always" /> <!-- Run those important/must-run methods like start selenium, open browser etc -->
         <include name="enabled" /> <!-- run only those that have "enabled" group -->
      </run>        
    </groups>
    <classes>
    <!-- Change this class to match the class that you want to debug. Also, add the group "enabled" to the method that needs debugging -->
        <class name="projects.zcs.tests.compose.SendBtnNegativeTest" />
    </classes>
  </test>
  
</suite>


2. In the classes Section,
Change the class name to fully qualified name of your class(including package name)

3. Open your MyClass1 and On top of Method1, add groups = "enabled", you already might have something like:
	@Test(dataProvider = "composeDataProvider",groups = { "smoke", "full" }, retryAnalyzer = RetryFailedTests.class)
Change that to:
	@Test(dataProvider = "composeDataProvider",groups = { "smoke", "full", "enabled" }, retryAnalyzer = RetryFailedTests.class)


4. Add break-point. Double-click on the line  in the gutter area(on linenumber) you want to break

5. Use the "Debug"-menu(not the Run-menu) from the toolbar and select testng-debug.xml

6. Expected:
- This should automatically open Debug-perspective
- And should suspend execution at the break-point you have added in Step #5
- From now on you should be able to step-over or step into etc


7. ****** After you are done with debugging, make sure to remove "enabled" from STEP 3 before you check in.


=======================================================================
How to debug a method that depends on other method
========================================================================
Suppose Method2 dependsOn Method1 and you want to debug Method2,
- Everything is same as debugging single method except Step3, now you will have to add "enabled" to Method1 as well.
If you forget TestNG throws an exception that clearly lets you know what to do.



=======================================================================
How to debug or ensure retry-logic works
========================================================================
Since the method is correctly working while you are writing test you are wondering
if the retry logic is correct and actually brings back the application's state to where it is supposed to be.


Class1:
	method1(){
		if(isExecutionARetry) {//if retry call..
			call method1_retry();
		}
		Test Step1: Enter some value
		Test Step2: Click somebutton
		Test Step3: Verify something
	}


	method1_retry() {
		isExecutionARetry = false;
		Re-login();
		NavigateToCompose();
	}


Now you want to test if method1_retry() actually works. 

Solution:
1. Put a break point in the first line of your method1_retry()
2. Simply add Assert.assertTrue(false); after the if- block of method1 to simulate an exception. 

Class1:
	method1(){
		if(isExecutionARetry) {//if retry call..
			call method1_retry();
		}
		Assert.assertTrue(false);  //this line throws an assertion exception, which would trigger retry-logic being called
		Test Step1: Enter some value
		Test Step2: Click somebutton
		Test Step3: Verify something
	}


3. Use Debug-Menu and choose testng-debug.xml 


